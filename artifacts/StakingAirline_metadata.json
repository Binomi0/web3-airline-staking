{
	"compiler": {
		"version": "0.8.19+commit.7dd6d404"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_timeUnit",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_rewardRatioNumerator",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_rewardRatioDenominator",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "_stakingToken",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_rewardToken",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_nativeTokenWrapper",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "string",
						"name": "prevURI",
						"type": "string"
					},
					{
						"indexed": false,
						"internalType": "string",
						"name": "newURI",
						"type": "string"
					}
				],
				"name": "ContractURIUpdated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "prevOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnerUpdated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "staker",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "rewardAmount",
						"type": "uint256"
					}
				],
				"name": "RewardsClaimed",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "staker",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "TokensStaked",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "staker",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "TokensWithdrawn",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "oldAmount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "newAmount",
						"type": "uint256"
					}
				],
				"name": "UpdatedMinStakeAmount",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "oldNumerator",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "newNumerator",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "oldDenominator",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "newDenominator",
						"type": "uint256"
					}
				],
				"name": "UpdatedRewardRatio",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "oldTimeUnit",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "newTimeUnit",
						"type": "uint256"
					}
				],
				"name": "UpdatedTimeUnit",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "claimRewards",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "contractURI",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					}
				],
				"name": "depositRewardTokens",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getRewardRatio",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "_numerator",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_denominator",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getRewardTokenBalance",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_staker",
						"type": "address"
					}
				],
				"name": "getStakeInfo",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "_tokensStaked",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_rewards",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getTimeUnit",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "_timeUnit",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes[]",
						"name": "data",
						"type": "bytes[]"
					}
				],
				"name": "multicall",
				"outputs": [
					{
						"internalType": "bytes[]",
						"name": "results",
						"type": "bytes[]"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "rewardToken",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "rewardTokenDecimals",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "_uri",
						"type": "string"
					}
				],
				"name": "setContractURI",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_newOwner",
						"type": "address"
					}
				],
				"name": "setOwner",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_numerator",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_denominator",
						"type": "uint256"
					}
				],
				"name": "setRewardRatio",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_timeUnit",
						"type": "uint256"
					}
				],
				"name": "setTimeUnit",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					}
				],
				"name": "stake",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "stakers",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "amountStaked",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "timeOfLastUpdate",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "unclaimedRewards",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "conditionIdOflastUpdate",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "stakersArray",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "stakingToken",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "stakingTokenBalance",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "stakingTokenDecimals",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					}
				],
				"name": "withdraw",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					}
				],
				"name": "withdrawRewardTokens",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"stateMutability": "payable",
				"type": "receive"
			}
		],
		"devdoc": {
			"events": {
				"ContractURIUpdated(string,string)": {
					"details": "Emitted when the contract URI is updated."
				},
				"OwnerUpdated(address,address)": {
					"details": "Emitted when a new Owner is set."
				},
				"RewardsClaimed(address,uint256)": {
					"details": "Emitted when a staker claims staking rewards."
				},
				"TokensStaked(address,uint256)": {
					"details": "Emitted when tokens are staked."
				},
				"TokensWithdrawn(address,uint256)": {
					"details": "Emitted when a tokens are withdrawn."
				},
				"UpdatedMinStakeAmount(uint256,uint256)": {
					"details": "Emitted when contract admin updates minimum staking amount."
				},
				"UpdatedRewardRatio(uint256,uint256,uint256,uint256)": {
					"details": "Emitted when contract admin updates rewardsPerUnitTime."
				},
				"UpdatedTimeUnit(uint256,uint256)": {
					"details": "Emitted when contract admin updates timeUnit."
				}
			},
			"kind": "dev",
			"methods": {
				"claimRewards()": {
					"details": "See {_claimRewards}. Override that to implement custom logic.             See {_calculateRewards} for reward-calculation logic."
				},
				"depositRewardTokens(uint256)": {
					"details": "Admin deposits reward tokens."
				},
				"getStakeInfo(address)": {
					"params": {
						"_staker": "Address for which to calculated rewards."
					},
					"returns": {
						"_rewards": "       Available reward amount.",
						"_tokensStaked": "  Amount of tokens staked."
					}
				},
				"multicall(bytes[])": {
					"details": "Receives and executes a batch of function calls on this contract.",
					"params": {
						"data": "The bytes data that makes up the batch of function calls to execute."
					},
					"returns": {
						"results": "The bytes data that makes up the result of the batch of function calls executed."
					}
				},
				"setContractURI(string)": {
					"details": "Caller should be authorized to setup contractURI, e.g. contract admin.                  See {_canSetContractURI}.                  Emits {ContractURIUpdated Event}.",
					"params": {
						"_uri": "keccak256 hash of the role. e.g. keccak256(\"TRANSFER_ROLE\")"
					}
				},
				"setOwner(address)": {
					"params": {
						"_newOwner": "The address to set as the new owner of the contract."
					}
				},
				"setRewardRatio(uint256,uint256)": {
					"details": "Only admin/authorized-account can call it.",
					"params": {
						"_denominator": "Reward ratio denominator.",
						"_numerator": "Reward ratio numerator."
					}
				},
				"setTimeUnit(uint256)": {
					"details": "Only admin/authorized-account can call it.",
					"params": {
						"_timeUnit": "New time unit."
					}
				},
				"stake(uint256)": {
					"details": "See {_stake}. Override that to implement custom logic.",
					"params": {
						"_amount": "Amount to stake."
					}
				},
				"withdraw(uint256)": {
					"details": "See {_withdraw}. Override that to implement custom logic.",
					"params": {
						"_amount": "Amount to withdraw."
					}
				},
				"withdrawRewardTokens(uint256)": {
					"details": "Admin can withdraw excess reward tokens."
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"claimRewards()": {
					"notice": "Claim accumulated rewards."
				},
				"contractURI()": {
					"notice": "Returns the contract metadata URI."
				},
				"getRewardTokenBalance()": {
					"notice": "View total rewards available in the staking contract."
				},
				"getStakeInfo(address)": {
					"notice": "View amount staked and rewards for a user."
				},
				"multicall(bytes[])": {
					"notice": "Receives and executes a batch of function calls on this contract."
				},
				"owner()": {
					"notice": "Returns the owner of the contract."
				},
				"setContractURI(string)": {
					"notice": "Lets a contract admin set the URI for contract-level metadata."
				},
				"setOwner(address)": {
					"notice": "Lets an authorized wallet set a new owner for the contract."
				},
				"setRewardRatio(uint256,uint256)": {
					"notice": "Set rewards per unit of time.           Interpreted as (numerator/denominator) rewards per second/per day/etc based on time-unit.           For e.g., ratio of 1/20 would mean 1 reward token for every 20 tokens staked."
				},
				"setTimeUnit(uint256)": {
					"notice": "Set time unit. Set as a number of seconds.           Could be specified as -- x * 1 hours, x * 1 days, etc."
				},
				"stake(uint256)": {
					"notice": "Stake ERC20 Tokens."
				},
				"withdraw(uint256)": {
					"notice": "Withdraw staked ERC20 tokens."
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts\\StakingAirline.sol": "StakingAirline"
		},
		"evmVersion": "paris",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol": {
			"keccak256": "0xc2dfd6ba9449f61b6b03b262182faf302f093a8c05dd10792aeecb4ed1663c0c",
			"license": "MIT",
			"urls": [
				"bzz-raw://f79816b0fdc0a6f53173238932ef86e2d7089a6e87b6c5c9c27e6d60f3fe809a",
				"dweb:/ipfs/QmTtXQ8sw91q4n4nXZigNWH3YaGqsJjPXyWCgPGDC6s24j"
			]
		},
		"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol": {
			"keccak256": "0xe8f27a3e3e25067334e76799f03d4de6d8f8535c3fc4806468228a9ebd5de51a",
			"license": "MIT",
			"urls": [
				"bzz-raw://686aaf8725727d94b36c53baad3779e168b31e33eec8d39b41e282382617c626",
				"dweb:/ipfs/QmWVRwPpZyweGCw7uRj1rXQTmcwaXB5Ctz3KvpNJPtxDP8"
			]
		},
		"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol": {
			"keccak256": "0x7acbc538aad6eb4614e26612a8c5c0149bb8808db95e2638d245a8365f63e572",
			"license": "MIT",
			"urls": [
				"bzz-raw://ea07bdbf13b16d19ccf8a8f1a361c80bbfb6073e8b1d079b72f7a5f09dc642cd",
				"dweb:/ipfs/QmQh5YhCySYR5RSAEFTt3NaDhq6MCxvSTdFh56874JPxbY"
			]
		},
		"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol": {
			"keccak256": "0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa",
			"license": "MIT",
			"urls": [
				"bzz-raw://740cf4dc535e3082560cf5a031473029f322690fc8037fe9d5e3a8bef42e757c",
				"dweb:/ipfs/QmTQxFdfxcaueQa23VX34wAPqzruZbkzyeN58tZK2yav2b"
			]
		},
		"@openzeppelin/contracts-upgradeable/governance/utils/IVotesUpgradeable.sol": {
			"keccak256": "0xe8e2d2f70db1913260634f710cc057d669b06eccf4dca27e18b79c3bbb101da6",
			"license": "MIT",
			"urls": [
				"bzz-raw://dcc6f106f0058232420987d601f34bf004743c30806b63650a64399317c56268",
				"dweb:/ipfs/QmNYqmWHMk7ZHLkuYLPotB8bE5TVttvGL513KLGT8ayNoM"
			]
		},
		"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
			"keccak256": "0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271",
			"license": "MIT",
			"urls": [
				"bzz-raw://8a313cf42389440e2706837c91370323b85971c06afd6d056d21e2bc86459618",
				"dweb:/ipfs/QmT8XUrUvQ9aZaPKrqgRU2JVGWnaxBcUYJA7Q7K5KcLBSZ"
			]
		},
		"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol": {
			"keccak256": "0x2b3005a0064cfc558bdf64b2bae94b565f4574a536aadd61c13838d4f2157790",
			"license": "MIT",
			"urls": [
				"bzz-raw://622c3eb87563e71585c9f538d1a196fe2d154dcc5b8f335e8770a8acc95e1f3a",
				"dweb:/ipfs/QmSnDqJJLzv3mirjGB1vrk5X7hegFdS7BKpscpxyqj7sWu"
			]
		},
		"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol": {
			"keccak256": "0xb1d9e69cf8073efa574b31b1f840e20709139c19bfb27e60b16393d6073f3d42",
			"license": "MIT",
			"urls": [
				"bzz-raw://7c39b800e55781c0f7a644ec9cc615664dbe2f009198e537e6acaad3086ba093",
				"dweb:/ipfs/Qmaugq2wsB1ASX8Kv29NwXqYhZY8HRNqcdvmBe9UUNEq2V"
			]
		},
		"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
			"keccak256": "0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff",
			"license": "MIT",
			"urls": [
				"bzz-raw://75b47c3aeca7b66ea6752f8be020ec5c1c502de6ec9065272dae23d3a52196e2",
				"dweb:/ipfs/QmUebPMHv16tYKFh5BmBQkMfRFb5b8UZ2RgVwdjxCeufVF"
			]
		},
		"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol": {
			"keccak256": "0xea2c6f9d434127bf36b1e3e5ebaaf6d28a64dbaeea560508e570014e905a5ad2",
			"license": "MIT",
			"urls": [
				"bzz-raw://3483370aa549810a946ace621a225616bb6d0b9ed22c3a99bbcf80dc4866ec39",
				"dweb:/ipfs/QmdgFnm6X2oQ574eJFLghVXVckwyC3SbiAUxXs934N1qvf"
			]
		},
		"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol": {
			"keccak256": "0x89743b8a05107d361d56ffc5c5b50f5c3a9d5c5ba40c80751fd54d272488b3b5",
			"license": "MIT",
			"urls": [
				"bzz-raw://863438ae3da8d852e830b1fb72e03abd29aa115081b6eb6207d809a946d5bb18",
				"dweb:/ipfs/Qma7b2828J7LkWUPEAtWRCjwuCaTSV24qxXj1H7B46GtPy"
			]
		},
		"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol": {
			"keccak256": "0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb",
			"license": "MIT",
			"urls": [
				"bzz-raw://4c9c634f99dd02d73ce7498b03a6305e251c05eeebb71457306561c1fab0fa7d",
				"dweb:/ipfs/QmbYRBbZHy8YoaQKXdPryiL3CSS7uUaRfRYi1TUj9cTqJQ"
			]
		},
		"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol": {
			"keccak256": "0xfe1053f3a6ee4527cde96c8152b8b1dbb98774639a64e819087bc80e618d7f7f",
			"license": "MIT",
			"urls": [
				"bzz-raw://d60039d30fc910757604a2bd75969e47f64833981e66de1f5843a671167f386b",
				"dweb:/ipfs/QmU9d5yDZQpb572GxN1L7EPocjyLjrWksoE8AFb1SEVSUb"
			]
		},
		"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol": {
			"keccak256": "0xcc70d8e2281fb3ff69e8ab242500f10142cd0a7fa8dd9e45882be270d4d09024",
			"license": "MIT",
			"urls": [
				"bzz-raw://17a4063bc918df0f7bb9cbf04c6f0bb4977afab3f2fc212bc138a178312a221d",
				"dweb:/ipfs/QmZMdvsHP5mDEAAdrK4bNeNh47TfmSFgN9qEBFTbie7zmm"
			]
		},
		"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
			"keccak256": "0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183",
			"license": "MIT",
			"urls": [
				"bzz-raw://72460c66cd1c3b1c11b863e0d8df0a1c56f37743019e468dc312c754f43e3b06",
				"dweb:/ipfs/QmPExYKiNb9PUsgktQBupPaM33kzDHxaYoVeJdLhv8s879"
			]
		},
		"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
			"keccak256": "0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149",
			"license": "MIT",
			"urls": [
				"bzz-raw://d6520943ea55fdf5f0bafb39ed909f64de17051bc954ff3e88c9e5621412c79c",
				"dweb:/ipfs/QmWZ4rAKTQbNG2HxGs46AcTXShsVytKeLs7CUCdCSv5N7a"
			]
		},
		"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol": {
			"keccak256": "0x798741e231b22b81e2dd2eddaaf8832dee4baf5cd8e2dbaa5c1dd12a1c053c4d",
			"license": "MIT",
			"urls": [
				"bzz-raw://c41e8a7a906b8f362c8b760a44edadc61782008ea2ecf377ac5b5325bf6c3912",
				"dweb:/ipfs/QmcXr19zuH3YLzD6RZNE6UTzvsKSckdxZQnagPoDGkCHu2"
			]
		},
		"@openzeppelin/contracts-upgradeable/utils/MulticallUpgradeable.sol": {
			"keccak256": "0xb8709268fac307114f6cbb5e3cee798d91cd0adfea4d337c4920f8f0b2414f15",
			"license": "MIT",
			"urls": [
				"bzz-raw://34975544d7bea644eee9ad6e9034b7bbbc0b165159b77f60d0c6004300ab601d",
				"dweb:/ipfs/QmUW5vLADhvVqSdBe96QFM6gzwtv9pagpaUkzXmaeQTWPQ"
			]
		},
		"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol": {
			"keccak256": "0x6b9a5d35b744b25529a2856a8093e7c03fb35a34b1c4fb5499e560f8ade140da",
			"license": "MIT",
			"urls": [
				"bzz-raw://187b5c3a1c9e77678732a2cc5284237f9cfca6bc28ee8bc0a0f4f951d7b3a2f8",
				"dweb:/ipfs/Qmb2KFr7WuQu7btdCiftQG64vTzrG4UyzVmo53EYHcnHYA"
			]
		},
		"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol": {
			"keccak256": "0x12f297cafe6e2847ae0378502f155654d0764b532a9873c8afe4350950fa7971",
			"license": "MIT",
			"urls": [
				"bzz-raw://28074f6df7132e83819042a06ef75ae53c88c53c077b8222b9772b780d58bd58",
				"dweb:/ipfs/QmXXwSxWn4XGCy218fn3f2m3UmFNUiroeQ8sCR3vzNU6Wc"
			]
		},
		"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol": {
			"keccak256": "0x3017aded62c4a2b9707f5f06f92934e592c1c9b6f384b91b51340a6d5f841931",
			"license": "MIT",
			"urls": [
				"bzz-raw://bb693afc2a614ec7afee965caaf5d53c3f32644e33286f60d17ae0e9aca84d44",
				"dweb:/ipfs/QmVJy43EBWvVT5NgpsV8WJfDHtZbnqZGMhmv1WbWaV5dJV"
			]
		},
		"@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol": {
			"keccak256": "0x31a2e227f5653e4b31e0f680857b8842073d083b33df11b3f3b3bb5ddc10526e",
			"license": "MIT",
			"urls": [
				"bzz-raw://051dd3770ecfea8fd28342b4e48c34d0cba9fbc2dbb1286d710d3d547d707018",
				"dweb:/ipfs/QmQp89U3xBRY7Xjw2HfozkMD3Yh64WvzJKQ1SHGRiEdm2J"
			]
		},
		"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol": {
			"keccak256": "0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a",
			"license": "MIT",
			"urls": [
				"bzz-raw://0895399d170daab2d69b4c43a0202e5a07f2e67a93b26e3354dcbedb062232f7",
				"dweb:/ipfs/QmUM1VH3XDk559Dsgh4QPvupr3YVKjz87HrSyYzzVFZbxw"
			]
		},
		"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {
			"keccak256": "0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09",
			"license": "MIT",
			"urls": [
				"bzz-raw://92ad7e572cf44e6b4b37631b44b62f9eb9fb1cf14d9ce51c1504d5dc7ccaf758",
				"dweb:/ipfs/QmcnbqX85tsWnUXPmtuPLE4SczME2sJaTfmqEFkuAJvWhy"
			]
		},
		"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol": {
			"keccak256": "0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a",
			"license": "MIT",
			"urls": [
				"bzz-raw://056027a78e6f4b78a39be530983551651ee5a052e786ca2c1c6a3bb1222b03b4",
				"dweb:/ipfs/QmXRUpywAqNwAfXS89vrtiE2THRM9dX9pQ4QxAkV1Wx9kt"
			]
		},
		"@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol": {
			"keccak256": "0xcef50f95b43b038aa40aed25b62fc45906c681a5c1d504a4fdcf3bc6330a8d4b",
			"license": "MIT",
			"urls": [
				"bzz-raw://ef883699a00970d5469e502514e2854704cd53d7a49825078aa807a2f056315c",
				"dweb:/ipfs/QmRjpN9oxgw6zHCVjfWNB9MzaYpNPPgqu7Rrwqwabmhpis"
			]
		},
		"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol": {
			"keccak256": "0x4807db844a856813048b5af81a764fdd25a0ae8876a3132593e8d21ddc6b607c",
			"license": "MIT",
			"urls": [
				"bzz-raw://3ca2fce75b1b20047a41f6f67d2d1be3d24308bf34668a22c2f971689e319a70",
				"dweb:/ipfs/QmQ8hxhdkDmwK9CBURbV2eaEeFTBYb3bB3ByWw1GmjvEWo"
			]
		},
		"@thirdweb-dev/contracts/base/Staking20Base.sol": {
			"keccak256": "0xdce1b6ca6fd1daf28fc0a5cd237b367f90bda997ea0726ebb4bbd4c0f51c5127",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://34b3a5e6fa1704fafeba5e56c984758b3a9fb9a0411b9c16c6c263bcac7f03ac",
				"dweb:/ipfs/QmNotQq7RKRg6b4J2vbJ6DFQmwteXjgDu6523L7XS9uT2w"
			]
		},
		"@thirdweb-dev/contracts/eip/interface/IERC20.sol": {
			"keccak256": "0x5bdd9dd97ba7d9d7c9a2953db287e4d9d7fa93a27a96bc2e72a8da4919b6f7ff",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://45527c265ee5de6bbb3ecfc052e7b1175531a82c2ac16172020aee855f7dd592",
				"dweb:/ipfs/QmVZthqbG916qUQSwv1LE8bB58ZGQ1VfQbLbbRV5urfEYA"
			]
		},
		"@thirdweb-dev/contracts/eip/interface/IERC20Metadata.sol": {
			"keccak256": "0xc2500d7a12573fc6f9714d806bec722ad4110a68e6dd14b69903042421001734",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://02423735619f14f3a13fae0ad6e407385565f159ad956c8bd1c14b3605a73a65",
				"dweb:/ipfs/QmYfYWh5wGidaQ7qDbC8oSuQ3gsnd3moJbWZ8yBzMnrYz1"
			]
		},
		"@thirdweb-dev/contracts/extension/ContractMetadata.sol": {
			"keccak256": "0xf53ab08ec3057056872c15e35a5610f7a43426bd2829786aed006d527177adfe",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://ee132ae5efdd372152febfcd8fd3a7cb82c7019367d92c886f5096003a79f392",
				"dweb:/ipfs/QmRW1cGWmZAu57huZpTUwsWB8AxUFrBp6g4NqozXpbWsR6"
			]
		},
		"@thirdweb-dev/contracts/extension/Multicall.sol": {
			"keccak256": "0x737a71c74307fa360863550d64bbaef599bbcb47829b19c3743ed1ff22b9af55",
			"license": "Apache 2.0",
			"urls": [
				"bzz-raw://7e82a79ee183dffa3ec01faac0907e04d72a185e55b7c24bff8e8e952b05f4c2",
				"dweb:/ipfs/QmQ9neZqpcgJtGgm84FBzMqFntZ1Sk1KFTWhjCMq8vnKDg"
			]
		},
		"@thirdweb-dev/contracts/extension/Ownable.sol": {
			"keccak256": "0x45447691686861237d5e1acb9d723d861a3fb3d561335e4f385d1547f25e27a5",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://5142293e36c736f744c73aaecab5f7be8e2d5ac70acc67851e0cea5171fd6782",
				"dweb:/ipfs/QmVJT5B84o5vFc5E2VteZdBhrT1HMutc7Ax72UKD1aZatJ"
			]
		},
		"@thirdweb-dev/contracts/extension/Staking20.sol": {
			"keccak256": "0x47cb5811b2e64295b4d2e5b9152f106d2eadb5d07e100541602bf8218c8469c8",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://a5c4801ff23af4cfcb66cdb38a1442e10786717fe16927647a4d26ab6818de14",
				"dweb:/ipfs/QmXrGNFFpU7TDMRxrhLKJgcxwrXvRKunbfWA1W7A5heTaQ"
			]
		},
		"@thirdweb-dev/contracts/extension/interface/IContractMetadata.sol": {
			"keccak256": "0x41d3f7f43c124e9ff0247cb94f4e8fc8c5a79b1de331c67eb03654154248d7f2",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://fa8d6251cf3a876193cc719b456c02ff23d3f2d5486431e9bdaf290be9a4ce9a",
				"dweb:/ipfs/QmRwnA2q15Vdkc66fz6BAinZM3tjuVNHn5CeGzc7ZFMAzr"
			]
		},
		"@thirdweb-dev/contracts/extension/interface/IMulticall.sol": {
			"keccak256": "0xe2bbd37b8fdb9cc8b933e598512a068ebb214b3f5abc2bc634916def55be4ef3",
			"license": "MIT",
			"urls": [
				"bzz-raw://012352099c262348ac755a53b082af520babc6c66dc5f1251fc23609728340ca",
				"dweb:/ipfs/QmcXEgzQ53jdJX5ZNy8zivvUjDq7J8WTnR1yAiwTpkQ2ar"
			]
		},
		"@thirdweb-dev/contracts/extension/interface/IOwnable.sol": {
			"keccak256": "0xd659a64da6264fdd50ee379be032fea4917eba4fadfd6d366107fb17e46907f3",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://c15940c4a3d229f4fdd1226fe297a58fde10b07b86a34de1ed11a8802dd5dea9",
				"dweb:/ipfs/QmS8p8CxWiahLkYsCWNhFjCnmQzuc4ck3kjYYuCFj8LsmC"
			]
		},
		"@thirdweb-dev/contracts/extension/interface/IPlatformFee.sol": {
			"keccak256": "0x821a81bf354f9ab048420d056ef0cbcb5a7bbffa49ce443f32bb9248532052d9",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://11ef266df18f4308b985d51ac884c009c40b550f918499780233c06193f3abc5",
				"dweb:/ipfs/QmdpFFZNQh6ihqXX8Q7cQ496JJMji9K7FtvPjCoRojyHTC"
			]
		},
		"@thirdweb-dev/contracts/extension/interface/IPrimarySale.sol": {
			"keccak256": "0x77c89cb8d9b781b0a08b1fa81c95a0dd5c19200b2fb0dc884c1084b931624004",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://a37b042af11a08ba5518dadf72c91745d1b5f42b1c20ea5282492bfd18f53869",
				"dweb:/ipfs/QmWEYYG5VqR8MRfr2rydDV98GLKmaJtCC8G1W7MzJ9qFnF"
			]
		},
		"@thirdweb-dev/contracts/extension/interface/IStaking20.sol": {
			"keccak256": "0x56114e7e2946b9850f1bc046a3ffa6c839676d0a5bca52cd96c86d5d2dae6ed8",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://a1f57893b77315f5ff222e2c2d79d5a7d7e33ab4f3b937cf32048bdae31c8f5f",
				"dweb:/ipfs/QmZNVQJQKpLVsDZXLMrWic4dTdpwsC5T8KmUxreGpmeQZg"
			]
		},
		"@thirdweb-dev/contracts/interfaces/IThirdwebContract.sol": {
			"keccak256": "0x98ea2478723e7fd94c44f498f78e75076d306aa716ff255adf55bda2822c1e78",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://8bebec94a0c258e86877260bbecdd0b5b6052ec5de16e39f3a4b2f0ce4c0134e",
				"dweb:/ipfs/QmdVLqwwSBPiTbpLdfkcZDhHMNd1GaKgAKPE2fVk5WibrK"
			]
		},
		"@thirdweb-dev/contracts/interfaces/IWETH.sol": {
			"keccak256": "0x5c1df76e8c1d9b5c069e4c0e35c3ad3316530c382fe3ddc6c21584f5e56f0a7b",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://1ff3429e0845d3266dd65ce097e194008511940a6f9fe651578b19737d37f2b1",
				"dweb:/ipfs/QmdnrZ7hr7BezqyhrmKTzTovbTjQYT5EcDYfvRYxxYFVeU"
			]
		},
		"@thirdweb-dev/contracts/interfaces/token/ITokenERC20.sol": {
			"keccak256": "0xb7fd49ffa29e1614a2a142fadfb90aac0a34850853a19d36c0a0b881e10954c1",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://c8750608d122e611df0de787c51ec854d1f0c97e6d63d7a82afdf177ee66d0a7",
				"dweb:/ipfs/QmYUs8Ae91NW4CnmmeHWxmTX8NmB4eEWpZHdfPJFkfk6zA"
			]
		},
		"@thirdweb-dev/contracts/lib/CurrencyTransferLib.sol": {
			"keccak256": "0x4b0dc7c0ca9e463b2efbf3e8177a40bab333f5669ab368cad98534678a81cbc3",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://1d5e91c28bb509afcbb3da66bbbf03465de5b168937b604f1cab63397472388a",
				"dweb:/ipfs/QmTqs9U5eWAQzJxVwD9pMQAtjXxK59cvJ4xzYMUnfVCsp5"
			]
		},
		"@thirdweb-dev/contracts/lib/FeeType.sol": {
			"keccak256": "0xf796f4f6126beb66821215c7bd0477c9aa39c986ba44a2001158f03e21b49381",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://2bf468022e505664a9e256cd01b62960542ee299c0dadfb567c5204d28b45657",
				"dweb:/ipfs/QmQUBaCm6SnaPgNxHEvx3DwmqeGNPvYsY4goxTHCzoMspP"
			]
		},
		"@thirdweb-dev/contracts/lib/TWAddress.sol": {
			"keccak256": "0x460f032cf3bf43d586e126ab2ec8be4335767f497ccb699741546a1cfba94a7e",
			"license": "Apache 2.0",
			"urls": [
				"bzz-raw://28fcbf6dde6c2eeb9864f6ec6f21dcc81ec426877debf4b912f2f3bc5b0fc91e",
				"dweb:/ipfs/QmS1SHrZDfefX8EE7DdvszTY6VPCHydf4HM7NKJ2gP72e6"
			]
		},
		"@thirdweb-dev/contracts/openzeppelin-presets/metatx/ERC2771ContextUpgradeable.sol": {
			"keccak256": "0xdbc96b1264d2e2bd82cb7e697056929325e09d1641321145a8cec53b22b9567d",
			"license": "MIT",
			"urls": [
				"bzz-raw://7ca7ccf947d21d98878ec18e941b750cd2ae7c563e6d2a707da4f806038d67c8",
				"dweb:/ipfs/QmYVLYUPMD3b95vKrS5yjxcz2MDNNzkWJY9xc9bc9oTZdh"
			]
		},
		"@thirdweb-dev/contracts/openzeppelin-presets/security/ReentrancyGuard.sol": {
			"keccak256": "0x2030bba0e41fb3daead24cdba39cd9d8ce2748de68e57f1c811420419a739afb",
			"license": "MIT",
			"urls": [
				"bzz-raw://1a64e19e10d66555abcf0b5392bb27f9e65f674d7688761f02f2c8b508490623",
				"dweb:/ipfs/QmNhMchAD6kuHFAAgdwCwuNUS3uaUD2gwofT5kxQAQeWH6"
			]
		},
		"@thirdweb-dev/contracts/openzeppelin-presets/token/ERC20/utils/SafeERC20.sol": {
			"keccak256": "0x293d8d7a3502950df5b9d6d36fcad85ca758f06dd946cdc8645cac1aa56686c4",
			"license": "MIT",
			"urls": [
				"bzz-raw://3cd805dbdcf6b7cebcd47201badbd7f7464e49eec51c4e0627b899ece1b04790",
				"dweb:/ipfs/QmRP3JYK4wzDaRrk9so6m433TuqHW9axAXLLnQAjCp2Gs4"
			]
		},
		"@thirdweb-dev/contracts/openzeppelin-presets/utils/math/SafeMath.sol": {
			"keccak256": "0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e",
			"license": "MIT",
			"urls": [
				"bzz-raw://864a40efcffdf408044c332a5aa38ec5618ed7b4eecb8f65faf45671bd6cdc65",
				"dweb:/ipfs/QmQJquTMtc6fgm5JQzGdsGpA2fqBe3MHWEdt2qzaLySMdN"
			]
		},
		"@thirdweb-dev/contracts/token/TokenERC20.sol": {
			"keccak256": "0x80237e200b358071275dbb928d1b8e84b28dc05d5623736f3b91fa341d2bd110",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://58deb4c330ffed31bb7c001832544c45832a6d4e8dec4862c9ccfcccce129fc3",
				"dweb:/ipfs/QmdNWXac7yLiyE5EKisQ6VfF7PKEjDXXu9eViqG7bEsvzM"
			]
		},
		"contracts\\StakingAirline.sol": {
			"keccak256": "0xa7756feb04d6855b9bb2f52757b317e3b91656c69efa15c96fd501c1d6b9abc7",
			"license": "MIT",
			"urls": [
				"bzz-raw://9fbaa077670f1548c5e39cf419bc75e59c29d677681e852af6d8932ef6447439",
				"dweb:/ipfs/QmbYqZZ16vvtCCpCSjZ67ayBZg1i7u5mvsfSJr325gYsVc"
			]
		}
	},
	"version": 1
}